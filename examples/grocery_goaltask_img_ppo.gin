# training & playing with Agent Learning Framework (Alf)
# python -m alf.bin.train --root_dir=~/tmp/gro_img_ppo --gin_file=grocery_goaltask_img_ppo.gin --alsologtostderr
# python -m alf.bin.play --root_dir=~/tmp/gro_img_ppo --gin_file=grocery_goaltask_img_ppo.gin

import alf.algorithms.ppo_algorithm
import alf.algorithms.ppo_loss
import alf.algorithms.ddpg_algorithm
import alf.trainers.off_policy_trainer
import alf.networks.stable_normal_projection_network

# environment config
import alf.environments.wrappers
create_environment.env_name='SocialBot-GroceryGround-v0'
GroceryGround.use_image_observation=True
create_environment.env_load_fn=@suite_socialbot.load
suite_socialbot.load.gym_env_wrappers=(@FrameStack,)
create_environment.num_parallel_environments=16
GroceryGround.resized_image_size=(48, 48)
GroceryGroundGoalTask.sparse_reward=False

PolicyDriver.observation_transformer=@image_scale_transformer

# algorithm config
observation_spec=@get_observation_spec()
action_spec=@get_action_spec()

actor/ActorDistributionNetwork.input_tensor_spec=%observation_spec
actor/ActorDistributionNetwork.conv_layer_params=((16, 3, 2), (32, 3, 2))
actor/ActorDistributionNetwork.fc_layer_params=(128,)
actor/ActorDistributionNetwork.output_tensor_spec=%action_spec
actor/ActorDistributionNetwork.activation_fn=@tf.nn.tanh
actor/ActorDistributionNetwork.continuous_projection_net=@StableNormalProjectionNetwork
StableNormalProjectionNetwork.init_means_output_factor=1e-10
StableNormalProjectionNetwork.inverse_std_transform='softplus'
StableNormalProjectionNetwork.scale_distribution=True
# StableNormalProjectionNetwork.state_dependent_std=True
# StableNormalProjectionNetwork.init_std=1.0
# StableNormalProjectionNetwork.min_std=0.5
# StableNormalProjectionNetwork.max_std=2.0
StableNormalProjectionNetwork.state_dependent_std=False
estimated_entropy.assume_reparametrization=True

value/ValueNetwork.input_tensor_spec=%observation_spec
value/ValueNetwork.conv_layer_params=((16, 3, 2), (32, 3, 2))
value/ValueNetwork.fc_layer_params=(128,)
value/ValueNetwork.activation_fn=@tf.nn.tanh

ac/Adam.learning_rate=2e-4

ActorCriticAlgorithm.action_spec=%action_spec
ActorCriticAlgorithm.actor_network=@actor/ActorDistributionNetwork()
ActorCriticAlgorithm.value_network=@value/ValueNetwork()
ActorCriticAlgorithm.optimizer=@ac/Adam()

ActorCriticAlgorithm.loss_class=@PPOLoss
ActorCriticAlgorithm.gradient_clipping=0.5
ActorCriticAlgorithm.clip_by_global_norm=True
ActorCriticAlgorithm.enforce_entropy_target=True

PPOLoss.entropy_regularization=None
PPOLoss.gamma=0.99
PPOLoss.normalize_advantages=True
PPOLoss.td_lambda=0.95
PPOLoss.td_error_loss_fn=@element_wise_squared_loss

# debug
PPOLoss.check_numerics=True
estimated_entropy.check_numerics=True

# training config
TrainerConfig.trainer=@sync_off_policy_trainer
TrainerConfig.algorithm_ctor=@PPOAlgorithm
TrainerConfig.checkpoint_interval=10
TrainerConfig.debug_summaries=True
TrainerConfig.eval_interval=10
TrainerConfig.evaluate=True
TrainerConfig.mini_batch_length=1
TrainerConfig.mini_batch_size=2048
TrainerConfig.num_updates_per_train_step=2
TrainerConfig.num_iterations=100000
TrainerConfig.summarize_grads_and_vars=True
TrainerConfig.summary_interval=2
TrainerConfig.unroll_length=512
TrainerConfig.use_tf_functions=True
PolicyDriver.summarize_action_distributions=True

TFUniformReplayBuffer.max_length=512
